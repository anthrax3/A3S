/**
 * *************************************************
 * Copyright (c) 2019, Grindrod Bank Limited
 * License MIT: https://opensource.org/licenses/MIT
 * **************************************************
 */
/*
 * A3S
 *
 * API Definition for A3S. This service allows authentication, authorisation and accounting.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using za.co.grindrodbank.a3s.Attributes;
using Microsoft.AspNetCore.Authorization;
using za.co.grindrodbank.a3s.A3SApiResources;
using za.co.grindrodbank.a3s.Models;

namespace za.co.grindrodbank.a3s.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class ConsentOfServiceApiController : ControllerBase
    { 
        /// <summary>
        /// Get current using consent of service entry.
        /// </summary>
        /// <remarks>Get current using consent of service entry.</remarks>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request.</response>
        /// <response code="401">Not authenticated.</response>
        /// <response code="403">Forbidden - You are not authorized to access the list of terms of service entries.</response>
        /// <response code="500">An unexpected error occurred.</response>
        [HttpGet]
        [Route("/consentOfService", Name = "GetCurrentConsentOfService")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ConsentOfService))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorResponse))]
        public abstract Task<IActionResult> GetCurrentConsentOfServiceAsync();

        /// <summary>
        /// Update consent of service entry.
        /// </summary>
        /// <remarks>Update consent of service entry.</remarks>
        /// <param name="consentOfService"></param>
        /// <response code="204">No Content.</response>
        /// <response code="400">Bad Request.</response>
        /// <response code="401">Not authenticated.</response>
        /// <response code="403">Forbidden - You are not authorized to create consent of service entries.</response>
        /// <response code="500">An unexpected error occurred.</response>
        [HttpPut]
        [Route("/consentOfService", Name = "UpdateConsentOfService")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 401, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 500, type: typeof(ErrorResponse))]
        public abstract Task<IActionResult> UpdateConsentOfServiceAsync([FromBody]ConsentOfService consentOfService);
    }
}
